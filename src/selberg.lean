/- ------------------------------------------------------------------------- -\
| @project: riemann_hypothesis                                                |
| @file:    selberg.lean                                                      |
| @author:  Brandon H. Gomes                                                  |
| @affil:   Rutgers University                                                |
| @source:  arXiv:1308.3067v2 [math.NT] 13 Feb 2015                           |
\- ------------------------------------------------------------------------- -/

import .analysis
import .asymptotic
import .complex
import .reduction

/-!
# Selberg Class

...
-/

--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables {‚ÑÇ : Type*} [DifferenceAlgebra ‚ÑÇ] {‚Ñ≠ : Complex ‚ÑÇ}

local notation `‚Ñù` := membership ‚Ñ≠.real
local notation `‚Ñ§` := membership ‚Ñ≠.int
local notation `‚Ñú` := ‚Ñ≠.Re
local notation `‚Ñë` := ‚Ñ≠.Im
local notation `‚Ñù‚ÇÄ` := ‚Ñ≠.‚Ñùzero
local notation `‚Ñ§‚ÇÄ` := ‚Ñ≠.‚Ñ§zero
local notation `‚Ñù‚ÇÄ‚Å∫` := ‚Ñ≠.‚Ñùpos
local notation `‚Ñ§‚ÇÄ‚Å∫` := ‚Ñ≠.‚Ñ§pos
local notation `exp` := ‚Ñ≠.exp.exp
local notation `log` := ‚Ñ≠.exp.log
local notation `pow` := ‚Ñ≠.exp.pow
local notation `|` z `|` := ‚Ñ≠.abs z
local notation `‚åä` z `‚åã` := ‚Ñ≠.floor z

variables {has_limit_at_0    : ùí´ (‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)}
          (lim0              : Reduction has_limit_at_0)
          (is_discrete       : ùí´ (‚ÑÇ ‚Üí Sort))
          {support_summable  : (‚ÑÇ ‚Üí Prop) ‚Üí ùí´ (‚ÑÇ ‚Üí ‚ÑÇ)}
          (support_sum       : Œ† ùîá, Reduction (support_summable ùîá))
          (finitely_many     : ùí´ (‚ÑÇ ‚Üí Sort))
          (is_smooth_‚Ñù‚ÑÇ      : ùí´ (‚Ñù ‚Üí ‚ÑÇ))
          (is_compact        : ùí´ (‚Ñù ‚Üí Sort))
          (fourier_transform : (‚Ñù ‚Üí ‚ÑÇ) ‚Üí (‚ÑÇ ‚Üí ‚ÑÇ))
          {‚Ñùpos_integrable   : ùí´ (‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)}
          (Int‚Ñùpos           : Reduction ‚Ñùpos_integrable)
          {‚Ñ§pos_summable     : ùí´ (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)}
          (Sum‚Ñ§pos           : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí Reduction ‚Ñ§pos_summable)

namespace LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

/--
A1:
- f(1) ‚àà ‚Ñù
- ‚àÄk > 0, f(n) * log^k n <<_k 1
- ‚àÄŒµ > 0, ‚àë_{n ‚â§ x}|f(n)|^2 <<_Œµ x^Œµ
-/
structure Axiom1 /-FIXME: [has_bigO (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)] [has_bigO (‚ÑÇ ‚Üí ‚ÑÇ)]-/ (f : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := (bounded     : ‚ÑÇ ‚Üí (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) ‚Üí (‚ÑÇ ‚Üí ‚ÑÇ) ‚Üí Type*)
       (real_at_one : ‚Ñ≠.is_real (f 1))
       -- (log_bound   : Œ† k : ‚Ñ§‚ÇÄ‚Å∫, (Œª n, f n * pow (log n) k) ‚â™ ‚Üì1)
       -- (sum_bound   : Œ† Œµ : ‚Ñù‚ÇÄ‚Å∫, (Œª x, /-FIXME:-/ 0) ‚â™ (Œª x, pow x Œµ))

/--
-/
def K_scaled (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := Œª x : ‚Ñù‚ÇÄ‚Å∫, x.elem * K x

/--
A2:
- x*K(x) extends to a Schwartz function on ‚Ñù
- lim_{x‚Üí0^+}(x * K(x)) ‚àà ‚Ñù
-/
structure Axiom2 (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := (schwartz_extension        : extends_to_schwartz (K_scaled K) ‚Ñ≠.is_real)
       (limit_at_zero_convergence : has_limit_at_0 (K_scaled K))
       (limit_is_real_at_zero     : ‚Ñ≠.is_real (lim0.reduce _ limit_at_zero_convergence))

local notation `abs_‚Ñú_le` T := Œª z, |‚Ñú z| ‚â§ T

/--
A3:
- supp(m) := { z ‚àà ‚ÑÇ | m (z) ‚â† 0 } is discrete(?) and contained in a horizontal strip
    { z ‚àà ‚ÑÇ | |‚Ñë(z)| ‚â§ y} for some y ‚â• 0
- ‚àë_{z ‚àà supp(m), |‚Ñú(z)| ‚â§ T} |m(z)| << 1 + T^A for some A ‚â• 0
- #{z ‚àà supp(m) | m(z) ‚àâ ‚Ñ§} < ‚àû
-/
structure Axiom3 (m : ‚ÑÇ ‚Üí ‚Ñù)
    := (discrete_support       : is_discrete (supp m))
       (horizontal_support     : ‚àÉ y ‚â• 0, Œ† z, supp m z ‚Üí |‚Ñë z| ‚â§ y)
       (support_sum_converges  : Œ† T, support_summable (abs_‚Ñú_le T) (Œª z, ‚Ñ≠.abs (m z)))
       (temp_                  : Œ† T, (support_sum _).reduce _ (support_sum_converges T) = 0)
       (support_sum_bound      : empty) -- FIXME: ‚àÉ A ‚â• (0 : ‚Ñù), (Œª T, 0) ‚â™ (Œª T, 1 + pow T A))
       (finite_non_int_support : finitely_many (Œª z, supp m z ‚àß ¬¨(m z ~ ‚Ñ≠.int)))

/--
-/
structure axiom4_property (f : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (m : ‚ÑÇ ‚Üí ‚Ñù) (g : ‚Ñù ‚Üí ‚ÑÇ)
    := (smooth                    :  is_smooth_‚Ñù‚ÑÇ g)
       (compact_support           :  is_compact (supp g))
       (transform                 := fourier_transform g)
       (transform_real_on_reals   :  Œ† r : ‚Ñù, transform r ~ ‚Ñ≠.real)
       (support_sum_converges     :  support_summable (Œª z, true) (Œª z, m z * transform z))
       (kernel_integral_converges :  ‚Ñùpos_integrable (Œª x, K x * (g 0 - g x.to_membership)))
       (sum_converges             :  ‚Ñ§pos_summable (Œª n, f n * g (‚Ñ≠.abs (log n))))
       (fourier_equality          :  (support_sum _).reduce _ support_sum_converges
                                  =  2 * ‚Ñú (Int‚Ñùpos.reduce _ kernel_integral_converges
                                                - (Sum‚Ñ§pos 1).reduce _ sum_converges))

/--
A4:
- ‚àÄ smooth g : ‚Ñù ‚Üí ‚ÑÇ of compact support and Fourier Transform h(z) = ‚à´_‚Ñù g(x)e^{ixz}dx
    satisfying h(‚Ñù) ‚äÜ ‚Ñù, we have the equality:
        ‚àë_{z‚ààsupp(m)}m(z)h(z) = 2*‚Ñú( ‚à´_0^‚àû K(x)(g(0) - g(x))dx - ‚àë_{n=1}^‚àû f(n)g(log n) )
-/
structure Axiom4 (f : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (m : ‚ÑÇ ‚Üí ‚Ñù)
    := (property : Œ† g, axiom4_property
                            support_sum is_smooth_‚Ñù‚ÑÇ is_compact fourier_transform
                                Int‚Ñùpos Sum‚Ñ§pos f K m g)

end LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables (‚Ñ≠)
include ‚Ñ≠

/--
-/
structure LDatum
    := (f      : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
       (K      : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
       (m      : ‚ÑÇ   ‚Üí ‚Ñù)
       (axiom1 : LDatum.Axiom1 f)
       (axiom2 : LDatum.Axiom2 lim0 K)
       (axiom3 : LDatum.Axiom3 is_discrete support_sum finitely_many m)
       (axiom4 : LDatum.Axiom4 support_sum is_smooth_‚Ñù‚ÑÇ is_compact fourier_transform Int‚Ñùpos Sum‚Ñ§pos f K m)

omit ‚Ñ≠
variables {‚Ñ≠}
--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

namespace LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables (F : LDatum ‚Ñ≠
                lim0 is_discrete support_sum finitely_many
                    is_smooth_‚Ñù‚ÑÇ is_compact fourier_transform Int‚Ñùpos Sum‚Ñ§pos)
          (sum : ‚Ñï ‚Üí (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) ‚Üí ‚ÑÇ)

/--
L-Function
- L_F(s) := ‚àë_{n=1}^‚àû a_F(n) n^-s = exp(‚àë_{n=2}^‚àû f(n) / log(n) * n ^ {1/2 - s}) for ‚Ñú(s) > 1
-/
def L (s : ‚ÑÇ) (œÉ‚ÇÅ : ‚Ñú s > 1)
    := exp (sum 2 (Œª n, F.f n / log n * pow n (2‚Åª¬π - s)))

/--
Degree of F
- d_F := 2 * lim_{x ‚Üí 0^+} xK(x)
-/
def degree
    := 2 * lim0.reduce _ F.axiom2.limit_at_zero_convergence

/--
Analytic Conductor of F
-/
def conductor
    := exp (-2 * F.f 1)

/--
F is positive if
- there are at most finitely many z ‚àà ‚ÑÇ with m(z) < 0
-/
def is_positive
    := finitely_many (Œª z, F.m z < 0)

end LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
