/- ------------------------------------------------------------------------- -\
| @project: riemann_hypothesis                                                |
| @file:    selberg.lean                                                      |
| @author:  Brandon H. Gomes                                                  |
| @affil:   Rutgers University                                                |
| @source:  arXiv:1308.3067v2 [math.NT] 13 Feb 2015                           |
\- ------------------------------------------------------------------------- -/

import .analysis
import .complex
import .reduction

/-!
# Selberg Class

...
-/

section analysis --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

/--
-/
def supp {X Y : Type*} [has_zero Y] (f : X ‚Üí Y)
    := Œª x, f x ‚â† 0

/--
-/
def lim0 {X Y} : (X ‚Üí Y) ‚Üí Y
    := sorry --! Reduction

/--
-/
def extends_to_schwartz {X Y} : (X ‚Üí Y) ‚Üí ùí´ Y ‚Üí Type*
    := sorry

/--
-/
def is_discrete {X : Type*} : ùí´ X ‚Üí Type*
    := sorry

/--
-/
def has_bounded_count {X : Type*} : ùí´ X ‚Üí Type*
    := sorry

/--
-/
def is_smooth {X Y} : (X ‚Üí Y) ‚Üí Type*
    := sorry

/--
-/
def is_compact {X : Type*} : ùí´ X ‚Üí Type*
    := sorry

/--
-/
def fourier_transform {X Y} : (X ‚Üí Y) ‚Üí (Y ‚Üí Y)
    := sorry

end analysis --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables {‚ÑÇ : Type*} [DifferenceAlgebra ‚ÑÇ] {‚Ñ≠ : Complex ‚ÑÇ}

local notation `‚Ñù` := membership ‚Ñ≠.real
local notation `‚Ñ§` := membership ‚Ñ≠.int
local notation `‚Ñú` := ‚Ñ≠.Re
local notation `‚Ñë` := ‚Ñ≠.Im
local notation `‚Ñù‚ÇÄ` := ‚Ñ≠.‚Ñùzero
local notation `‚Ñ§‚ÇÄ` := ‚Ñ≠.‚Ñ§zero
local notation `‚Ñù‚ÇÄ‚Å∫` := ‚Ñ≠.‚Ñùpos
local notation `‚Ñ§‚ÇÄ‚Å∫` := ‚Ñ≠.‚Ñ§pos
local notation `exp` := ‚Ñ≠.exp.exp
local notation `log` := ‚Ñ≠.exp.log
local notation `pow` := ‚Ñ≠.exp.pow
local notation `|` z `|` := ‚Ñ≠.abs z
local notation `‚åä` z `‚åã` := ‚Ñ≠.floor z

namespace LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

/--
A1:
- f(1) ‚àà ‚Ñù
- ‚àÄk > 0, f(n) * log^k n <<_k 1
- ‚àÄŒµ > 0, ‚àë_{n ‚â§ x}|f(n)|^2 <<_Œµ x^Œµ
-/
structure Axiom1 (f : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := (bounded     : ‚ÑÇ ‚Üí (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) ‚Üí (‚ÑÇ ‚Üí ‚ÑÇ) ‚Üí Type*)
       (real_at_one : ‚Ñ≠.is_real (f 1))
       (log_bound   : Œ† k : ‚Ñ§‚ÇÄ‚Å∫, bounded k (Œª n, f n * pow (log n) k) 1)
       (sum_bound   : empty)

/--
-/
def K_scaled (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := Œª x : ‚Ñù‚ÇÄ‚Å∫, x.elem * K x

/--
A2:
- x*K(x) extends to a Schwartz function on ‚Ñù
- lim_{x‚Üí0^+}(x * K(x)) ‚àà ‚Ñù
-/
structure Axiom2 (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
    := (schwartz_extension : extends_to_schwartz (K_scaled K) ‚Ñ≠.is_real)
       (real_limit         : ‚Ñ≠.is_real (lim0 (K_scaled K)))

/--
A3:
- supp(m) := { z ‚àà ‚ÑÇ | m (z) ‚â† 0 } is discrete(?) and contained in a horizontal strip
    { z ‚àà ‚ÑÇ | |‚Ñë(z)| ‚â§ y} for some y ‚â• 0
- ‚àë_{z ‚àà supp(m), |‚Ñú(z)| ‚â§ T} |m(z)| << 1 + T^A for some A ‚â• 0
- #{z ‚àà supp(m) | m(z) ‚àâ ‚Ñ§} < ‚àû
-/
structure Axiom3 (m : ‚ÑÇ ‚Üí ‚Ñù)
    := (discrete_support       : is_discrete (supp m))
       (horizontal_support     : ‚àÉ y ‚â• 0, (Œ† z, supp m z ‚Üí |‚Ñë z| ‚â§ y))
       (support_sum_bound      : empty)
       (finite_non_int_support : has_bounded_count (Œª z, supp m z ‚àß ¬¨(m z ~ ‚Ñ≠.int)))

/--
A4:
- ‚àÄ smooth g : ‚Ñù ‚Üí ‚ÑÇ of compact support and Fourier Transform h(z) = ‚à´_‚Ñù g(x)e^{ixz}dx
    satisfying h(‚Ñù) ‚äÜ ‚Ñù, we have the equality:
        ‚àë_{z‚ààsupp(m)}m(z)h(z) = 2*‚Ñú( ‚à´_0^‚àû K(x)(g(0) - g(x))dx - ‚àë_{n=1}^‚àû f(n)g(log n) )
-/
structure Axiom4 (f : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (K : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) (m : ‚ÑÇ ‚Üí ‚Ñù)
    := (special_equality : Type*)
       (fourier_equality : Œ† (g : ‚Ñù ‚Üí ‚ÑÇ) {_ : is_smooth g} {_ : is_compact (supp g)}, special_equality)

end LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables (‚Ñ≠)
include ‚Ñ≠

/--
-/
structure LDatum
    := (f  : ‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
       (K  : ‚Ñù‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ)
       (m  : ‚ÑÇ   ‚Üí ‚Ñù)
       (a1 : LDatum.Axiom1 f)
       (a2 : LDatum.Axiom2 K)
       (a3 : LDatum.Axiom3 m)
       (a4 : LDatum.Axiom4 f K m)

omit ‚Ñ≠
variables {‚Ñ≠}
--‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--

namespace LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
variables (F : LDatum ‚Ñ≠)
          --! (summable_sequences : ùí´ (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ))
          --! (sum : Reduction summable_sequences)
          (sum : ‚Ñï ‚Üí (‚Ñ§‚ÇÄ‚Å∫ ‚Üí ‚ÑÇ) ‚Üí ‚ÑÇ)

/--
L-Function
- L_F(s) := ‚àë_{n=1}^‚àû a_F(n) n^-s = exp(‚àë_{n=2}^‚àû f(n) / log(n) * n ^ {1/2 - s}) for ‚Ñú(s) > 1
-/
def L (s : ‚ÑÇ) (œÉ‚ÇÅ : ‚Ñú s > 1)
    := exp (sum 2 (Œª n, F.f n / log n * pow n (2‚Åª¬π - s)))

/--
Degree of F
- d_F := 2 * lim_{x ‚Üí 0^+} xK(x)
-/
def degree
    := 2 * lim0 (LDatum.K_scaled F.K)

/--
Analytic Conductor of F
-/
def conductor
    := exp (-2 * F.f 1)

/--
F is positive if
- there are at most finitely many z ‚àà ‚ÑÇ with m(z) < 0
-/
def is_positive (finitely_many_negative : (‚ÑÇ ‚Üí ‚Ñù) ‚Üí Type*)
    := finitely_many_negative F.m

end LDatum --‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî--
